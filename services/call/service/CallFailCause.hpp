/*
 * Copyright (C) 2006 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef TELEPHONY_CALL_FAIL_CAUSE_HPP_
#define TELEPHONY_CALL_FAIL_CAUSE_HPP_

namespace telephony
{

    //-----------------------------------------------------------------------------
    // Call fail causes from TS 24.008 .
    // These are mostly the cause codes we need to distinguish for the UI.
    // See 22.001 Annex F.4 for mapping of cause codes to local tones.

    // CDMA call failure reasons are derived from the possible call failure scenarios described
    // in "CDMA IS2000 - Release A (C.S0005-A v6.0)" standard.
    //
    // The detailed fail causes are defined in ITU Recommendation Q.850.
    //-----------------------------------------------------------------------------
    namespace CallFailCause
    {

        // The disconnect cause is not valid (Not received a disconnect cause)
        constexpr int32_t NOT_VALID = -1;

        // Unassigned/Unobtainable number
        constexpr int32_t UNOBTAINABLE_NUMBER = 1;

        constexpr int32_t NO_ROUTE_TO_DEST = 3;
        constexpr int32_t CHANNEL_UNACCEPTABLE = 6;
        constexpr int32_t OPERATOR_DETERMINED_BARRING = 8;
        constexpr int32_t NORMAL_CLEARING = 16;
        constexpr int32_t USER_BUSY = 17;
        constexpr int32_t NO_USER_RESPINDING = 18;

        //  This cause is used when the called party has been alerted but does not respond with a connect
        //  indication within a prescribed period of time. Note - This cause is not necessarily generated
        //  by Q.931 procedures but may be generated by internal network timers.
        constexpr int32_t USER_ALERTING_NO_ANSWER = 19;

        // The equipment sending this cause does not wish to accept this call, although it could have
        // accepted the call because the equipment sending this cause is neither busy nor incompatible.
        // The network may also generate this cause, indicating that the call was cleared due to a
        // supplementary service constraint. The diagnostic field may contain additional information
        // about the supplementary service and reason for rejection.
        constexpr int32_t CALL_REJECTED = 21;

        constexpr int32_t NUMBER_CHANGED = 22;
        constexpr int32_t PRE_EMPTION = 25;

        // The user has not been awarded the incoming call.
        constexpr int32_t NON_SELECTED_USER_CLEARING = 26;

        constexpr int32_t DESTINATION_OUT_OF_ORDER = 27;

        // Incomplete number
        constexpr int32_t INVALID_NUMBER_FORMAT = 28;

        constexpr int32_t FACILITY_REJECTED = 29;

        constexpr int32_t STATUS_ENQUIRY = 30;
        constexpr int32_t NORMAL_UNSPECIFIED = 31;
        constexpr int32_t NO_CIRCUIT_AVAIL = 34;

        // Resource unavailable
        constexpr int32_t NETWORK_OUT_OF_ORDER = 38;
        constexpr int32_t TEMPORARY_FAILURE = 41;
        constexpr int32_t SWITCHING_CONGESTION = 42;
        constexpr int32_t ACCESS_INFORMATION_DISCARDED = 43;
        constexpr int32_t CHANNEL_NOT_AVAIL = 44;
        constexpr int32_t RESOURCES_UNAVAILABLE_UNSPECIFIED = 47;
        constexpr int32_t QOS_NOT_AVAIL = 49;

        /// Service or option unavailable
        // The user has requested a supplementary service, which is available, but the user is not
        // authorized to use.
        constexpr int32_t REQUESTED_FACILITY_NOT_SUBSCRIBED = 50;

        // Although the called party is a member of the CUG (Closed User Group) for the incoming CUG
        // call, incoming calls are not allowed to this member of the CUG.
        constexpr int32_t INCOMING_CALL_BARRED_WITHIN_CUG = 55;
        constexpr int32_t BEARER_CAPABILITY_NOT_AUTHORISED = 57;
        constexpr int32_t BEARER_NOT_AVAIL = 58;

        // This cause is used to report a service or option not available event only when no other cause
        // between 49-62 (where a service or option is unavailable) applies.
        constexpr int32_t SERVICE_OR_OPTION_NOT_AVAILABLE = 63;
        constexpr int32_t BEARER_SERVICE_NOT_IMPLEMENTED = 65;

        // Service or option not implemented
        constexpr int32_t ACM_LIMIT_EXCEEDED = 68;
        constexpr int32_t REQUESTED_FACILITY_NOT_IMPLEMENTED = 69;

        // The calling party has requested an unrestricted bearer service but that the equipment sending
        // this cause only supports the restricted version of the requested bearer capability.
        constexpr int32_t ONLY_RESTRICTED_DIGITAL_INFO_BC_AVAILABLE = 70;
        constexpr int32_t SERVICE_OR_OPTION_NOT_IMPLEMENTED = 79;
        constexpr int32_t INVALID_TRANSACTION_ID_VALUE = 81;

        // Invalid message
        constexpr int32_t USER_NOT_MEMBER_OF_CUG = 87;
        constexpr int32_t INCOMPATIBLE_DESTINATION = 88;
        constexpr int32_t INVALID_TRANSIT_NETWORK_SELECTION = 91;
        constexpr int32_t SEMANTICALLY_INCORRECT_MESSAGE = 95;
        constexpr int32_t INVALID_MANDATORY_INFORMATION = 96;

        // Protocol error
        constexpr int32_t MESSAGE_TYPE_NON_EXISTENT = 97;
        constexpr int32_t MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROT_STATE = 98;
        constexpr int32_t IE_NON_EXISTENT_OR_NOT_IMPLEMENTED = 99;

        // The equipment sending this cause has received an information element which it has
        // implemented; however, one or more fields in the information element are coded in such a way
        // which has not been implemented by the equipment sending this cause.
        constexpr int32_t CONDITIONAL_IE_ERROR = 100;
        constexpr int32_t MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE = 101;
        constexpr int32_t RECOVERY_ON_TIMER_EXPIRY = 102;
        constexpr int32_t PROTOCOL_ERROR_UNSPECIFIED = 111;
        constexpr int32_t INTERWORKING_UNSPECIFIED = 127;

        // Others
        constexpr int32_t CALL_BARRED = 240;
        constexpr int32_t FDN_BLOCKED = 241;
        constexpr int32_t IMEI_NOT_ACCEPTED = 243;

        // Stk Call Control
        constexpr int32_t DIAL_MODIFIED_TO_USSD = 244;
        constexpr int32_t DIAL_MODIFIED_TO_SS = 245;
        constexpr int32_t DIAL_MODIFIED_TO_DIAL = 246;

        // The call cannot be established because RADIO is OFF
        constexpr int32_t RADIO_OFF = 247;

        // The call cannot be established because of no valid SIM
        constexpr int32_t NO_VALID_SIM = 249;

        // The call is dropped or failed internally by modem
        constexpr int32_t RADIO_INTERNAL_ERROR = 250;

        // Call failed because of UE timer expired while waiting for a response from network
        constexpr int32_t NETWORK_RESP_TIMEOUT = 251;

        // Call failed because of a network reject
        constexpr int32_t NETWORK_REJECT = 252;
        // Call failed because of radio access failure. ex. RACH failure
        constexpr int32_t RADIO_ACCESS_FAILURE = 253;
        // Call failed/dropped because of a Radio Link Failure (RLF).
        constexpr int32_t RADIO_LINK_FAILURE = 254;
        // Call failed/dropped because of radio link lost
        constexpr int32_t RADIO_LINK_LOST = 255;
        // Call failed because of a radio uplink issue
        constexpr int32_t RADIO_UPLINK_FAILURE = 256;
        // Call failed because of a RRC (Radio Resource Control) connection setup failure
        constexpr int32_t RADIO_SETUP_FAILURE = 257;
        // Call failed/dropped because of RRC (Radio Resource Control) connection release from NW
        constexpr int32_t RADIO_RELEASE_NORMAL = 258;
        // Call failed/dropped because of RRC (Radio Resource Control) abnormally released by
        // modem/network.
        constexpr int32_t RADIO_RELEASE_ABNORMAL = 259;
        // Access class blocked - TS 31.121 5.2.1
        constexpr int32_t ACCESS_CLASS_BLOCKED = 260;

        // Call failed/dropped because of a network detach.
        constexpr int32_t NETWORK_DETACH = 261;

        // Emergency Redial
        constexpr int32_t EMERGENCY_TEMP_FAILURE = 325;
        constexpr int32_t EMERGENCY_PERM_FAILURE = 326;

        // Extended Normal Clearing
        constexpr int32_t EXTENDED_NORMAL_CLEARING = 390;

        constexpr int32_t CDMA_LOCKED_UNTIL_POWER_CYCLE = 1000;
        constexpr int32_t CDMA_DROP = 1001;
        constexpr int32_t CDMA_INTERCEPT = 1002;
        constexpr int32_t CDMA_REORDER = 1003;
        constexpr int32_t CDMA_SO_REJECT = 1004;
        constexpr int32_t CDMA_RETRY_ORDER = 1005;
        constexpr int32_t CDMA_ACCESS_FAILURE = 1006;
        constexpr int32_t CDMA_PREEMPTED = 1007;

        // For non-emergency number dialed while in emergency callback mode.
        constexpr int32_t CDMA_NOT_EMERGENCY = 1008;

        // Access Blocked by CDMA Network.
        constexpr int32_t CDMA_ACCESS_BLOCKED = 1009;

        constexpr int32_t ERROR_UNSPECIFIED = 0xffff;

    } // namespace CallFailCause

} // namespace telephony

#endif // TELEPHONY_CALL_FAIL_CAUSE_HPP_
